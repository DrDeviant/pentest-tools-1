#!/usr/bin/python3

import requests
import os
import sys
from time import sleep

user_path = print('[+] Creating the respective Linux and Windows directories...\n')
sleep(1)
for dir in ['linux-tools', 'windows-tools']:
  if dir in os.listdir():
    print(f'[x] Directory {dir} already exists...')
  else:
    os.mkdir(dir)
    print(f'[+] Directories {dir} successfully created...\n')

#Download linux tools first
# print('[+] Downloading updated linux scripts and standalone binaries...')
# sleep(1)
# print('[+] Fetching Linpeas...')
# linpeas = 'https://raw.githubusercontent.com/carlospolop/PEASS-ng/master/linPEAS/linpeas.sh'
# get_linpeas = requests.get(linpeas, allow_redirects=True)
# print('[+] Saving LinPeas...')
# sleep(1)
# open('linux-tools/linpeas.sh', 'wb').write(get_linpeas.content)
# print('[+] Lipeas saved...')
# sleep(1)
# print('[+] Getting Linux binaries...')
# sleep(1)

# nix_url = 'https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/'
# binaries = ['ncat','nmap','socat']
# for nix_bin in binaries:
#   binary_url = nix_url + nix_bin
#   get_nix_bin = requests.get(binary_url, allow_redirects=True)
#   print(f'[+] Saving {nix_bin}...')
#   open(f'linux-tools/{nix_bin}', 'wb').write(get_nix_bin.content)
#   print(f'[+] {nix_bin} saved')

# print(f'[+] Downloading Chisel...')
# chisel_url = 'https://github.com/jpillora/chisel/releases/download/v1.7.6/chisel_1.7.6_linux_amd64.gz'
# get_chisel = requests.get(chisel_url, allow_redirects=True)
# open('linux-tools/chisel_1.7.6_linux_amd64.gz', 'wb').write(get_chisel.content)
# print('[+] Chisel saved...')
# print('[+] All linux scripts and binaries updated')
# sleep(1)

#Create folders for different architectures
os.chdir('windows-tools')
for arch in ['binaries', 'powershell', 'batcmd']:
  if arch in os.listdir():
    print(f'[x] Directory {arch} already exists...')
  else:
    os.mkdir(arch)
    print(f'[+] Directory {arch} successfully created...\n')
    
print('[+] Downloding updated Windows Binaries...')
os.chdir('../')
sleep(1)
chisel_win = 'https://github.com/jpillora/chisel/releases/download/v1.7.6/chisel_1.7.6_windows_amd64.gz'
chisel_win86 = 'https://github.com/jpillora/chisel/releases/download/v1.7.6/chisel_1.7.6_windows_386.gz'
print('[+] Fetching chisel...')
get_chisel = requests.get(chisel_win, allow_redirects=True)
get_chisel_386 = requests.get(chisel_win86, allow_redirects=True)
print('[+] Saving chisel')
open('windows-tools/binaries/chisel_1.7.6_windows_amd64.gz', 'wb').write(get_chisel.content)
open('windows-tools/binaries/chisel_1.7.6_windows_386.gz', 'wb').write(get_chisel_386.content)
print('[+] Chisel saved...')
sleep(1)

win_url = 'https://github.com/andrew-d/static-binaries/raw/master/binaries/windows/x86/'
win_binaries = ['ncat', 'nmap', 'nping']
for win_bin in win_binaries:
    binary_url = win_url + win_bin
    get_win_bin = requests.get(binary_url, allow_redirects=True)
    print(f'[+] Saving {win_bin}...')
    open(f'windows-tools/binaries/{win_bin}', 'wb').write(get_win_bin.content)
    print(f'[+] {win_bin} saved')
    sleep(1)

#ncat
print('[+] Downloading Ncat....')
ncat_win = 'https://github.com/tijme/binaries/raw/master/ncat/ncat_windows_x86.exe'
get_ncat_win = requests.get(ncat_win, allow_redirects=True)
open('windows-tools/binaries/ncat-x86.exe', 'wb').write(get_ncat_win.content)
print('[+] Ncat Saved...')
sleep(1)

#nmap
print('[+] Downloading Nmap....')
nmap_win = 'https://github.com/tijme/binaries/raw/master/nmap/nmap_windows_x86.exe'
get_nmap_win = requests.get(nmap_win, allow_redirects=True)
open('windows-tools/binaries/nmap-x86.exe', 'wb').write(get_ncat_win.content)
print('[+] Nmap Saved...')
sleep(1)

#netcat
print('[+] Downloading Netcat....')
netcat_win_x64 = 'https://github.com/tijme/binaries/raw/master/netcat/netcat_windows_x64.exe'
get_netcat_64 = requests.get(netcat_win_x64, allow_redirects=True)
open('windows-tools/binaries/netcat-x64.exe', 'wb').write(get_netcat_64.content)
netcat_win_x86 = 'https://github.com/tijme/binaries/raw/master/netcat/netcat_windows_x86.exe'
get_netcat_86 = requests.get(netcat_win_x86, allow_redirects=True)
open('windows-tools/binaries/netcat-x86.exe', 'wb').write(get_netcat_86.content)
print('[+] Netcat Saved...')
sleep(1)

#Plink
print('[+] Downloading Plink....')
plink_x64 = 'https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe'
get_plink_64 = requests.get(plink_x64, allow_redirects=True)
open('windows-tools/binaries/plink-x64.exe', 'wb').write(get_plink_64.content)
plink_x86 = 'https://the.earth.li/~sgtatham/putty/latest/w32/plink.exe'
get_plink_86 = requests.get(plink_x86, allow_redirects=True)
open('windows-tools/binaries/plink-x86.exe', 'wb').write(get_plink_86.content)
print('[+] Plink saved....')
sleep(1)

#Socat
print('[+] Downloading Socat....')
socat_x64 = 'https://github.com/3ndG4me/socat/releases/download/v1.7.3.3/socatx64.exe'
get_socat_64 = requests.get(socat_x64, allow_redirects=True)
open('windows-tools/binaries/socat-x64.exe', 'wb').write(get_socat_64.content)
socat_x86 = 'https://github.com/3ndG4me/socat/releases/download/v1.7.3.3/socatx86.exe'
get_socat_86 = requests.get(socat_x64, allow_redirects=True)
open('windows-tools/binaries/socat-x86.exe', 'wb').write(get_socat_86.content)
print('[+] Socat saved....')
sleep(1)

#Winpeas
print('[+] Downloading Winpeas...')
winpeas_64 = 'https://github.com/carlospolop/PEASS-ng/raw/master/winPEAS/winPEASexe/binaries/x64/Release/winPEASx64.exe'
get_winpeas_64 = requests.get(winpeas_64, allow_redirects=True)
open(f'windows-tools/binaries/winPEASx64.exe', 'wb').write(get_winpeas_64.content)

winpeas_86 = 'https://github.com/carlospolop/PEASS-ng/raw/master/winPEAS/winPEASexe/binaries/x86/Release/winPEASx86.exe'
get_winpeas_86 = requests.get(winpeas_86, allow_redirects=True)
open(f'windows-tools/binaries/winPEASx86.exe', 'wb').write(get_winpeas_86.content)
  
winpeas_any = 'https://github.com/carlospolop/PEASS-ng/raw/master/winPEAS/winPEASexe/binaries/Release/winPEASany.exe'
get_winpeas_any = requests.get(winpeas_any, allow_redirects=True)
open('windows-tools/binaries/winPEASany.exe', 'wb').write(get_winpeas_any.content)

#obfuscated-winpeas
winpeas_obfus = ['winPEASx64.exe', 'winPEASx86.exe', 'winPEASany.exe']
winpeas_obfus_url = 'https://github.com/carlospolop/PEASS-ng/raw/master/winPEAS/winPEASexe/binaries/Obfuscated%20Releases/'
for obfus_winpeas in winpeas_obfus:
  winpeas_obfus_bin_url = winpeas_obfus_url + obfus_winpeas
  get_obfus_winpeas = requests.get(winpeas_obfus_bin_url, allow_redirects=True)
  open(f'windows-tools/binaries/obf-{obfus_winpeas}', 'wb').write(get_obfus_winpeas.content)
#dotfuscated-winpeas
winpeas_dotfuscated_x64 = 'https://github.com/carlospolop/PEASS-ng/raw/master/winPEAS/winPEASexe/binaries/Obfuscated%20Releases/Dotfuscated/x64/winPEASx64.exe'
get_dot_winpeas_64 = requests.get(winpeas_dotfuscated_x64, allow_redirects=True)
open('windows-tools/binaries/dot-winPEASx64.exe', 'wb').write(get_dot_winpeas_64.content)

winpeas_dotfuscated_x86 = 'https://github.com/carlospolop/PEASS-ng/raw/master/winPEAS/winPEASexe/binaries/Obfuscated%20Releases/Dotfuscated/x86/winPEASx86.exe'
get_dot_winpeas_86 = requests.get(winpeas_dotfuscated_x86, allow_redirects=True)
open('windows-tools/binaries/dot-winPEASx86.exe', 'wb').write(get_dot_winpeas_86.content)

winpeas_dotfuscated_any = 'https://github.com/carlospolop/PEASS-ng/raw/master/winPEAS/winPEASexe/binaries/Obfuscated%20Releases/Dotfuscated/any/winPEASany.exe'
get_dot_winpeas_any = requests.get(winpeas_dotfuscated_any, allow_redirects=True)
open('windows-tools/binaries/dot-winPEASany.exe', 'wb').write(get_dot_winpeas_any.content)

#batch cmd script
winpeas_bat = 'https://raw.githubusercontent.com/carlospolop/PEASS-ng/master/winPEAS/winPEASbat/winPEAS.bat'
get_winpeas_bat = requests.get(winpeas_bat, allow_redirects=True)
open('windows-tools/batcmd/winPEAS.bat', 'wb').write(get_winpeas_bat.content)
print('[+] Winpeas saved...')
sleep(1)

#Mimikatz
print('[+] Downloading Mimikatz v2.2.0-20210810-2...')
mimikatz = ['mimikatz_trunk.zip', 'mimikatz_trunk.7z']
mimikatz_url = 'https://github.com/gentilkiwi/mimikatz/releases/download/2.2.0-20210810-2/'
for mimi in mimikatz:
  mimi_url = mimikatz_url + mimi
  get_mimi = requests.get(mimi_url, allow_redirects=True)
  open(f'windows-tools/binaries/{mimi}', 'wb').write(get_mimi.content)
  print('[+] Mimikatz saved...')
  sleep(1)

#LaZagne
print('[+] Downloading LaZagne v 2.4.3...')
lazagne_x86 = 'https://github.com/AlessandroZ/LaZagne/releases/download/2.4.3/lazagne.exe'
get_lazagne = requests.get(lazagne_x86, allow_redirects=True)
open('windows-tools/binaries/lazagne.exe', 'wb').write(get_lazagne.content)
print('[+] Lazagne saved...')
sleep(1)

#AMSI Trigger
print('[+] Downloading AMSI Trigger')
amsi_trigger = ['AmsiTrigger_x64.exe', 'AmsiTrigger_x86.exe']
amsi_trigger_url = 'https://github.com/RythmStick/AMSITrigger/releases/download/v3/'
for trigger in amsi_trigger:
  trigger_url = amsi_trigger_url + trigger
  get_trigger = requests.get(trigger_url, allow_redirects=True)
  open(f'windows-tools/binaries/{trigger}', 'wb').write(get_trigger.content)
  print('[+] AMSI Trigger saved...')
  sleep(1)
  
#PSTools
print('[+] Downloading PSTools...')
ps_tools = 'https://download.sysinternals.com/files/PSTools.zip'
get_pstools = requests.get(ps_tools, allow_redirects=True)
open('windows-tools/binaries/PSTools.zip', 'wb').write(get_pstools.content)
print('[+] PSTools saved...')
sleep(1)

#Process Hacker
print('[+] Downloading Process Hacker...')
process_hacker = 'https://github.com/processhacker/processhacker/releases/download/v2.39/processhacker-2.39-bin.zip'
get_process_hacker = requests.get(process_hacker, allow_redirects=True)
open('windows-tools/binaries/processhacker-2.39-bin.zip', 'wb').write(get_process_hacker.content)
print('[+] Process hacker saved...')
sleep(1)

#Mona
print('[+] Downloading mona.py...')
mona = 'https://raw.githubusercontent.com/corelan/mona/master/mona.py'
get_mona = requests.get(mona, allow_redirects=True)
open('windows-tools/binaries/mona.py', 'wb').write(get_mona.content)
print('[+] Mona saved...')
sleep(1)

#SharpEDR Checker
print('[+] Downloading SharpEDR Checker...')
sharp_edr_checker = 'https://github.com/PwnDexter/SharpEDRChecker/releases/download/1.1/SharpEDRChecker.exe'
get_sharpedr = requests.get(sharp_edr_checker, allow_redirects=True)
open('windows-tools/binaries/SharpEDRChecker.exe', 'wb').write(get_sharpedr.content)
print('[+] SharpEDR Checker saved...')
sleep(1)

#SharpHound-exe
print('[+] Downloading SharpHound binary...')
sharphound_exe = 'https://github.com/BloodHoundAD/BloodHound/raw/master/Collectors/SharpHound.exe'
get_sharphound = requests.get(sharphound_exe, allow_redirects=True)
open('windows-tools/binaries/SharpHound.exe', 'wb').write(get_sharphound.content)
print('[+] SharpHound binary saved...')
sleep(1)

#SharpHound-ps1
print('[+] Downloading SharpHound powershell...')
sharphound_ps1 = 'https://raw.githubusercontent.com/BloodHoundAD/BloodHound/master/Collectors/SharpHound.ps1'
get_sharphound_ps1 = requests.get(sharphound_ps1, allow_redirects=True)
open('windows-tools/powershell/SharpHound.ps1', 'wb').write(get_sharphound_ps1.content)
print('[+] SharpHound powershell saved...')
sleep(1)

#GhostPack Tools
print('[+] Downloading GhostPack tools (Rubeus, SeatBelt, SafetyKatz etc)...')
ghostPack_base = ['Certify.exe','LockLess.exe', 'RestrictedAdmin.exe', 'Rubeus.exe', 'SafetyKatz.exe', 'SeatBelt.exe', 'SharpDPAPI.exe', 'SharpDump.exe', 'SharpUp.exe', 'SharpWMI.exe']
for base_bin in ghostPack_base:
  ghostPack_base_url = 'https://github.com/r3motecontrol/Ghostpack-CompiledBinaries/raw/master/' + base_bin
  get_base_bin = requests.get(ghostPack_base_url, allow_redirects=True)
  open(f'windows-tools/binaries/{base_bin}', 'wb').write(get_base_bin.content)
  
ghostPack_v35 = ['LockLess.exe', 'Rubeus.exe', 'SafetyKatz.exe', 'Seatbelt.exe', 'SharpDPAPI.exe', 'SharpDump.exe', 'SharpUp.exe', 'SharpWMI.exe']
for v35_bin in ghostPack_v35:
  ghostPack_v35_url = 'https://github.com/r3motecontrol/Ghostpack-CompiledBinaries/raw/master/dotnet%20v3.5%20compiled%20binaries/' + v35_bin
  get_v35_bin = requests.get(ghostPack_v35_url, allow_redirects=True)
  open(f'windows-tools/binaries/v35-{v35_bin}', 'wb').write(get_v35_bin.content)
  
ghostPack_v45 = ['Certify.exe', 'ForgeCert.exe', 'LockLess.exe', 'Rubeus.exe', 'SafetyKatz.exe', 'Seatbelt.exe', 'SharpDPAPI.exe', 'SharpDump.exe', 'SharpUp.exe', 'SharpWMI.exe']
for v45_bin in ghostPack_v45:
  ghostPack_v45_url = 'https://github.com/r3motecontrol/Ghostpack-CompiledBinaries/raw/master/dotnet%20v4.5%20compiled%20binaries/' + v45_bin
  get_v45_bin = requests.get(ghostPack_v45_url, allow_redirects=True)
  open(f'windows-tools/binaries/v45-{v45_bin}', 'wb').write(get_v45_bin.content)
  print('[+] GhostPack tools saved...')
  sleep(1)
  print('[+] All tools downloaded...exiting')
  sys.exit()





